% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rgcca_cv.r
\name{rgcca_cv}
\alias{rgcca_cv}
\title{rgcca_cv}
\usage{
rgcca_cv(blocks, type = "rgcca", response = NULL, par_type = "tau",
  par_value = NULL, validation = "kfold", type_cv = "regression",
  fit = "lm", k = 5, n_run = 1, one_value_per_cv = FALSE,
  n_cores = parallel::detectCores() - 1, quiet = TRUE,
  superblock = FALSE, scale = TRUE, scale_block = TRUE,
  tol = 1e-06, scheme = "factorial", method = "nipals",
  rgcca_res = NULL, parallelization = NULL, tau = rep(1,
  length(blocks)), ncomp = rep(1, length(blocks)), sparsity = rep(1,
  length(blocks)), init = "svd", bias = TRUE, new_scaled = FALSE,
  ...)
}
\arguments{
\item{blocks}{A list of matrices giving the \eqn{J} blocks of variables \eqn{\mathbf{X_1}, \mathbf{X_2}, ..., \mathbf{X_J}}.}

\item{type}{A character giving the type of analysis: rgcca, sgcca, pca, 
pls, cca, ifa, ra, cpca-w, gcca, hpca, maxbet-b, maxbet, maxdiff-b,maxdiff,
 maxvar-a, maxvar-b, maxvar, niles, r-maxvar, rcon-pca, ridge-gca, sabscor,
 ssqcor, ssqcor, ssqcov-1, ssqcov-2, ssqcov,  sum-pca, sumcor, sumcov-1, 
 sumcov-2, sumcov, sabscov, plspm}

\item{response}{An integer giving the position of the response block within 
the blocks (activates the supervised mode).}

\item{par_type}{"sparsity", "tau" or "ncomp", the parameter to be crossvalided}

\item{par_value}{Grid of values to be tested. Should be a matrix of size n*p with p the number of blocks and n the number of combinations to be tested.}

\item{validation}{A character for the type of validation among "loo", "kfold", "test".}

\item{type_cv}{type of crossvalidation. Default to "regression", but can also be "classification"}

\item{fit}{A character giving the function used to compare the trained and the tested models}

\item{k}{If validation = 'kfold', an integer giving the number of folds.}

\item{n_run}{number of cross-validations (with kfold option). Default to 1}

\item{one_value_per_cv}{If TRUE, the k values obtained for each k-fold steps are averaged}

\item{n_cores}{An integer for the number of cores used in parallelization}

\item{quiet}{A logical value indicating if it should not print warnings}

\item{superblock}{A boolean giving the presence (TRUE) / absence (FALSE) of
a superblock}

\item{scale}{A logical value indicating if each block is normalised and divided by the square root of its number of variables and then divided by the square root of its number of variables.}

\item{scale_block}{A logical value indicating if each block have the same weight in the RGCCA analysis. Otherwise, the weight of each block depends on the number of variables of the block}

\item{tol}{An integer giving the value for stopping the algorithm convergence.}

\item{scheme}{A character or a function giving the link function for 
covariance maximization among "horst" (the identity function), "factorial"
 (the squared values), "centroid" (the absolute values). Only, the horst 
 scheme penalizes structural negative correlation. The factorial scheme 
 discriminates more strongly the blocks than the centroid one.}

\item{method}{Either a character corresponding to the used method ("complete","knn","em","sem") or a function taking a list of J blocks (A) as only parameter and returning the imputed list. 
\itemize{
\item{\code{"mean"}}{ corresponds to an imputation by the colmeans}
\item{\code{"complete"}}{ corresponds to run RGCCA only on the complete subjects (subjects with missing data are removed)}
\item{\code{"nipals"}}{ corresponds to run RGCCA on all available data (NIPALS algorithm)}
\item{\code{"em"}}{ corresponds to impute the data with EM-type algorithms}
\item{\code{"sem"}}{ corresponds to impute the data with EM-type algorithms with superblock approach}
\item{\code{"knn1"}}{ corresponds to impute the data with the 1-Nearest Neighbor. 1 can be replace by another number (such as knn3) to impute with the 3-Nearest Neighbors.}}}

\item{rgcca_res}{a result of rgcca (from whom all parameters will be imported)}

\item{parallelization}{if TRUE parallelization is run, if FALSE, no parallelisation is run. If NULL (default) parallelization is always used except for Windows in case of length(nperm)<10}

\item{tau}{Either a 1*J vector or a \eqn{\mathrm{max}(ncomp) \times J} matrix containing the values 
of the regularization parameters (default: tau = 1, for each block and each dimension). Tau varies from 0 (maximizing the correlation) to 1 (maximizing the covariance).
If tau = "optimal" the regularization paramaters are estimated for each block and each dimension using the Schafer and Strimmer (2005)
analytical formula . If tau is a \eqn{1\times J} vector, tau[j] is identical across the dimensions of block \eqn{\mathbf{X}_j}. 
If tau is a matrix, tau[k, j] is associated with \eqn{\mathbf{X}_{jk}} (\eqn{k}th residual matrix for block \eqn{j}). It can be estimated by using \link{rgcca_permutation}.}

\item{ncomp}{A vector of 1*J integers giving the number of component for 
each blocks}

\item{sparsity}{Either a \eqn{1*J} vector or a \eqn{max(ncomp) * J} matrix encoding the L1 constraints applied to the outer weight vectors.
Elements of sparsity vary between \eqn{1/sqrt(p_j)} and 1 (larger values of sparsity correspond to less penalization).
If sparsity is a vector, L1-penalties are the same for all the weights corresponding to the same block but different components:
\deqn{for all h, |a_{j,h}|_{L_1} \le c_1[j] \sqrt{p_j},}
with \eqn{p_j} the number of variables of \eqn{X_j}.
If sparsity is a matrix, each row \eqn{h} defines the constraints applied to the weights corresponding to components \eqn{h}:
\deqn{for all h, |a_{j,h}|_{L_1} \le c_1[h,j] \sqrt{p_j}.} It can be estimated by using \link{rgcca_permutation}.}

\item{init}{A character giving the mode of initialization to use in the algorithm. The alternatives are either by Singular Value Decompostion ("svd") or random ("random") (default: "svd").}

\item{bias}{A logical value for biaised (\eqn{1/n}) or unbiaised (\eqn{1/(n-1)}) estimator of the var/cov (default: bias = TRUE).}

\item{new_scaled}{A boolean scaling the blocks to predict}

\item{...}{Further graphical parameters (see plot2D functions)}
}
\description{
This function is dedicated to supervised approaches (with response parameter in rgcca not NULL). By default, it is the last block in blocks.
It allows to test a grid of parameters (sparsity, ncomp or tau) with cross-validation approaches. 
This cross-validation is based on RMSE for quantitative response.
}
\examples{
data("Russett")
blocks <- list(
    agriculture = Russett[, seq(3)],
    industry = Russett[, 4:5],
    politic = Russett[, 6:11])
    res=rgcca_cv(blocks,response=3, type="rgcca",par_type="tau",
    par_value=c(0,0.2,0.3),n_run=1,n_cores=1)
    
}
