% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rgcca_permutation.R
\name{rgcca_permutation}
\alias{rgcca_permutation}
\title{Tuning RGCCA parameters}
\usage{
rgcca_permutation(blocks, type = "rgcca", perm.par = "tau",
  perm.value = NULL, nperm = 20, n_cores = parallel::detectCores() -
  1, quiet = TRUE, ...)
}
\arguments{
\item{blocks}{A list of matrix}

\item{type}{A character giving the type of analysis: c('rgcca', 'cpca-w', 'gcca', 'hpca', 'maxbet-b', 'maxbet', 'maxdiff-b','maxdiff', 'maxvar-a', 'maxvar-b', 'maxvar', 'niles', 'r-maxvar', 'rcon-pca',
'ridge-gca', 'sabscor', 'ssqcor', 'ssqcor', 'ssqcov-1', 'ssqcov-2', 'ssqcov',
'sum-pca', 'sumcor', 'sumcov-1', 'sumcov-2', 'sumcov.', 'sabscov', 'plspm','cca', 'ra', 'ifa', 'pls','pca')}

\item{nperm}{Number of permutation tested for each set of constraint}

\item{n_cores}{An integer for the number of cores used in parallelization}

\item{quiet}{If TRUE, does not print warnings}

\item{...}{other RGCCA parameters # TODO}

\item{p_spars}{A matrix, a vector or an integer containing sets of constraint 
variables to be tested, one row by combination. By default, sgcca.permute takes 10 sets between 
min values ($1/sqrt(ncol)$) and 1}

\item{p_ncomp}{A matrix, a vector or an integer containing sets of number of 
components, one row by set. By default, sgcca.permute takes as many 
combinations as the maximum number of columns in each block}
}
\value{
A object permutation, which is a list containing :

\item{pval}{Pvalue}

\item{zstat}{Statistic Z}

\item{bestpenalties}{Penalties corresponding to the best Z-statistic}

\item{permcrit}{RGCCA criteria obtained with permutation set}

\item{crit}{ RGCCA criterion for the original dataset}
}
\description{
Run through a set of parameters (sparsity or number of selected components) with permutation to select the one maximizing RGCCA criterion 
The sparsity parameter is tuned with only one component per block.
}
\examples{
data("Russett")
A = list(agriculture = Russett[, seq(3)], industry = Russett[, 4:5],
    politic = Russett[, 6:11] )
res = rgcca_permutation(A, nperm = 2, n_cores = 1)
    rgcca_permutation(A, perm.par = "ncomp", nperm = 2, n_cores = 1)
rgcca_permutation(A, perm.par = "sparsity", perm.value = 0.8, nperm = 2, n_cores = 1)
rgcca_permutation(A, perm.par = "sparsity", perm.value = c(0.6, 0.75, 0.5), nperm = 2, n_cores = 1)
rgcca_permutation(A, perm.par = "sparsity", perm.value = matrix(c(0.6, 0.75, 0.5), 3, 3, byrow = TRUE),
 nperm = 2, n_cores = 1)
rgcca_permutation(A, perm.par = "tau", perm.value = 0.8, nperm = 2, n_cores = 1)
rgcca_permutation(A, perm.par = "tau", perm.value = c(0.6, 0.75, 0.5), nperm = 2, n_cores = 1)
rgcca_permutation(A, perm.par = "tau", perm.value = matrix(c(0.6, 0.75, 0.5), 3, 3, byrow = TRUE),
                  nperm = 2, n_cores = 1)
rgcca_permutation(A, perm.par = "ncomp", perm.value = 2, nperm = 2, n_cores = 1)
rgcca_permutation(A, perm.par = "ncomp", perm.value = c(2,2,3), nperm = 2, n_cores = 1)
rgcca_permutation(A, perm.par = "ncomp", perm.value = matrix(c(2,2,3), 3, 3, byrow = TRUE), 
nperm = 2, n_cores = 1)
plot(res)
print(res)
}
